// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String?
  email        String   @unique
  document     String   @unique // CPF or CNPJ
  accountType  String   @default("PF") // 'PF' or 'PJ'
  passwordHash String   @map("password_hash")
  salt         String   @map("salt")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  Wallet   Wallet[]
  Merchant Merchant? // Relationship for PJ accounts

  @@map("users")
}

model Merchant {
  id                String  @id @default(uuid()) @map("id")
  userId            String  @unique @map("user_id")
  businessName      String  @map("business_name")
  businessAddress   String? @map("business_address")
  contactPhone      String? @map("contact_phone")
  taxIdentification String  @map("tax_identification")
  industryType      String? @map("industry_type")
  accountManager    String? @map("account_manager")

  User User @relation(fields: [userId], references: [id])

  @@map("merchants")
}

model Wallet {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  currencyCode String      @map("currency_code")
  balance      Int      @map("balance")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user              User       @relation(fields: [userId], references: [id])
  sentTransfers     Transfer[] @relation("SourceWalletTransfers")
  receivedTransfers Transfer[] @relation("DestinationWalletTransfers")
  Ledger            Ledger[]

  @@map("wallets")
}

model Transfer {
  id                  String   @id @default(uuid()) @map("id")
  sourceWalletId      String   @map("source_wallet_id")
  destinationWalletId String   @map("destination_wallet_id")
  amount              Int      @map("amount")
  currency            String   @default("BRL") @map("currency")
  status              String   @default("pending") @map("status") // Status: pending, completed, failed
  reason              String?  @map("reason") // Optional, for failures or specific notes
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  sourceWallet      Wallet   @relation("SourceWalletTransfers", fields: [sourceWalletId], references: [id])
  destinationWallet Wallet   @relation("DestinationWalletTransfers", fields: [destinationWalletId], references: [id])
  Ledger            Ledger[]

  @@map("transfers")
}

model Ledger {
  id         String   @id @default(uuid()) @map("id")
  walletId   String   @map("wallet_id")
  transferId String  @map("transfer_id")
  amount     Int  @map("amount") // Positive for credit, negative for debit
  type       String   @map("type") // e.g., "transfer", "adjustment", "fee"
  createdAt  DateTime @default(now()) @map("created_at")

  wallet   Wallet   @relation(fields: [walletId], references: [id])
  transfer Transfer @relation(fields: [transferId], references: [id])

  @@map("ledgers")
}
